---
interface Props {
  categories: string[];
  priceRanges: { min: number; max: number; label: string }[];
  materials: string[];
}

const { categories, priceRanges, materials } = Astro.props;
---

<div class="bg-white p-4 rounded-lg shadow-md">
  <h3 class="text-lg font-semibold mb-4">Filtros</h3>
  
  <!-- Filtro por categoría -->
  <div class="mb-6">
    <h4 class="font-medium mb-2">Categoría</h4>
    <div class="space-y-2">
      {categories.map(category => (
        <label class="flex items-center">
          <input 
            type="checkbox" 
            name="category" 
            value={category} 
            class="rounded text-amber-600 focus:ring-amber-500"
            data-filter="category"
          />
          <span class="ml-2">{category}</span>
        </label>
      ))}
    </div>
  </div>
  
  <!-- Filtro por precio -->
  <div class="mb-6">
    <h4 class="font-medium mb-2">Precio</h4>
    <div class="space-y-2">
      {priceRanges.map(range => (
        <label class="flex items-center">
          <input 
            type="radio" 
            name="price" 
            value={`${range.min}-${range.max}`} 
            class="text-amber-600 focus:ring-amber-500"
            data-filter="price"
          />
          <span class="ml-2">{range.label}</span>
        </label>
      ))}
    </div>
  </div>
  
  <!-- Filtro por material -->
  <div class="mb-6">
    <h4 class="font-medium mb-2">Material</h4>
    <div class="space-y-2">
      {materials.map(material => (
        <label class="flex items-center">
          <input 
            type="checkbox" 
            name="material" 
            value={material} 
            class="rounded text-amber-600 focus:ring-amber-500"
            data-filter="material"
          />
          <span class="ml-2">{material}</span>
        </label>
      ))}
    </div>
  </div>
  
  <!-- Botones de acción -->
  <div class="flex space-x-2">
    <button 
      id="apply-filters" 
      class="bg-amber-600 hover:bg-amber-700 text-white py-2 px-4 rounded-md transition-colors duration-300 flex-1"
    >
      Aplicar
    </button>
    <button 
      id="reset-filters" 
      class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded-md transition-colors duration-300"
    >
      Resetear
    </button>
  </div>
</div>

<script>
  // Lógica para manejar los filtros
  document.addEventListener('DOMContentLoaded', () => {
    const applyFiltersButton = document.getElementById('apply-filters');
    const resetFiltersButton = document.getElementById('reset-filters');
    
    if (applyFiltersButton && resetFiltersButton) {
      // Aplicar filtros
      applyFiltersButton.addEventListener('click', () => {
        const filters: Record<string, string[]> = {
          category: [],
          price: [],
          material: []
        };
        
        // Recopilar todos los filtros seleccionados
        document.querySelectorAll('[data-filter]').forEach(element => {
          const input = element as HTMLInputElement;
          const filterType = input.dataset.filter as string;
          
          if (input.checked) {
            filters[filterType].push(input.value);
          }
        });
        
        // Construir la URL con los parámetros de filtro
        const params = new URLSearchParams();
        
        Object.entries(filters).forEach(([key, values]) => {
          if (values.length > 0) {
            params.append(key, values.join(','));
          }
        });
        
        // Redirigir a la página de productos con los filtros aplicados
        window.location.href = `/productos?${params.toString()}`;
      });
      
      // Resetear filtros
      resetFiltersButton.addEventListener('click', () => {
        document.querySelectorAll('[data-filter]').forEach(element => {
          (element as HTMLInputElement).checked = false;
        });
      });
    }
  });
</script>

