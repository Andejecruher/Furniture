---
import MainLayout from '../../layouts/MainLayout.astro';
import type { FurnitureProduct } from '../../types/furniture';

// Obtener el ID del producto de los parámetros de la URL
const { id } = Astro.params;

// En un caso real, buscarías el producto en una base de datos o API
// Aquí simulamos la búsqueda
const allProducts: FurnitureProduct[] = [
  // Aquí irían todos los productos
];

const product = allProducts.find(p => p.id === id);

// Si el producto no existe, redirigir a la página de productos
if (!product) {
  return Astro.redirect('/productos');
}

// Productos relacionados (misma categoría)
const relatedProducts = allProducts
  .filter(p => p.category === product.category && p.id !== product.id)
  .slice(0, 4);
---

<MainLayout title={product.name} description={product.description}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Galería de imágenes -->
      <div class="lg:w-1/2">
        <div class="bg-gray-100 rounded-lg overflow-hidden mb-4">
          <img 
            id="main-image" 
            src={product.imageUrl || "/placeholder.svg"} 
            alt={product.name} 
            class="w-full h-auto object-cover"
          />
        </div>
        
        <!-- Miniaturas (simuladas) -->
        <div class="grid grid-cols-4 gap-2">
          {[1, 2, 3, 4].map(index => (
            <button 
              class="thumbnail-btn bg-gray-100 rounded-md overflow-hidden border-2 border-transparent hover:border-amber-500 transition-all duration-300"
              data-image={product.imageUrl}
            >
              <img 
                src={product.imageUrl || "/placeholder.svg"} 
                alt={`${product.name} - Vista ${index}`} 
                class="w-full h-24 object-cover"
              />
            </button>
          ))}
        </div>
      </div>
      
      <!-- Información del producto -->
      <div class="lg:w-1/2">
        <h1 class="text-3xl font-bold mb-2">{product.name}</h1>
        
        <div class="flex items-center mb-4">
          <div class="flex items-center">
            {[1, 2, 3, 4, 5].map(star => (
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                class={`h-5 w-5 ${star <= 4 ? 'text-yellow-400' : 'text-gray-300'}`} 
                viewBox="0 0 20 20" 
                fill="currentColor"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <span class="ml-2 text-gray-600">(12 reseñas)</span>
          </div>
        </div>
        
        <div class="mb-4">
          {product.discount > 0 ? (
            <div class="flex items-center">
              <span class="text-2xl font-bold text-gray-900">${(product.price * (1 - product.discount / 100)).toFixed(2)}</span>
              <span class="ml-2 text-lg line-through text-gray-500">${product.price.toFixed(2)}</span>
              <span class="ml-2 bg-red-500 text-white px-2 py-1 rounded-md text-sm font-bold">
                {product.discount}% OFF
              </span>
            </div>
          ) : (
            <span class="  OFF
              </span>
            </div>
          ) : (
            <span class="text-2xl font-bold text-gray-900">${product.price.toFixed(2)}</span>
          )}
        </div>
        
        <p class="text-gray-600 mb-6">{product.description}</p>
        
        <!-- Selección de color -->
        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Color</h3>
          <div class="flex space-x-2">
            {product.colors.map(color => (
              <button 
                class="color-selector w-8 h-8 rounded-full border-2 border-gray-300 hover:border-amber-500 transition-all duration-300"
                data-color={color}
                style={`background-color: ${color.toLowerCase()}`}
              >
                <span class="sr-only">{color}</span>
              </button>
            ))}
          </div>
        </div>
        
        <!-- Cantidad -->
        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Cantidad</h3>
          <div class="flex items-center">
            <button 
              id="decrease-quantity" 
              class="bg-gray-200 hover:bg-gray-300 text-gray-800 w-10 h-10 rounded-l-md flex items-center justify-center transition-colors duration-300"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
              </svg>
            </button>
            <input 
              type="number" 
              id="quantity" 
              value="1" 
              min="1" 
              class="w-16 h-10 border-gray-200 text-center focus:ring-amber-500 focus:border-amber-500"
            />
            <button 
              id="increase-quantity" 
              class="bg-gray-200 hover:bg-gray-300 text-gray-800 w-10 h-10 rounded-r-md flex items-center justify-center transition-colors duration-300"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="flex flex-col sm:flex-row gap-4 mb-8">
          <button 
            id="add-to-cart" 
            class="bg-amber-600 hover:bg-amber-700 text-white py-3 px-6 rounded-md transition-colors duration-300 flex-1 flex items-center justify-center"
            data-product-id={product.id}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            Añadir al Carrito
          </button>
          <button 
            class="border border-gray-300 hover:border-amber-600 hover:text-amber-600 py-3 px-6 rounded-md transition-colors duration-300 flex items-center justify-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            Añadir a Favoritos
          </button>
        </div>
        
        <!-- Detalles del producto -->
        <div class="border-t border-gray-200 pt-6">
          <h3 class="text-lg font-semibold mb-4">Detalles del Producto</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 class="font-medium mb-2">Dimensiones</h4>
              <p class="text-gray-600">
                {product.dimensions?.width} x {product.dimensions?.height} x {product.dimensions?.depth} {product.dimensions?.unit}
              </p>
            </div>
            <div>
              <h4 class="font-medium mb-2">Materiales</h4>
              <p class="text-gray-600">{product.materials.join(', ')}</p>
            </div>
          </div>
          
          <div class="mt-4">
            <h4 class="font-medium mb-2">Características</h4>
            <ul class="list-disc list-inside text-gray-600">
              {product.features.map(feature => (
                <li>{feature}</li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Productos relacionados -->
    <div class="mt-16">
      <h2 class="text-2xl font-bold mb-6">Productos Relacionados</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {relatedProducts.map(relatedProduct => (
          <a href={`/productos/${relatedProduct.id}`} class="block">
            <div class="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300">
              <img 
                src={relatedProduct.imageUrl || "/placeholder.svg"} 
                alt={relatedProduct.name} 
                class="w-full h-48 object-cover"
              />
              <div class="p-4">
                <h3 class="text-lg font-semibold text-gray-800">{relatedProduct.name}</h3>
                <p class="text-gray-600 mt-1">{relatedProduct.category}</p>
                <div class="mt-2">
                  {relatedProduct.discount > 0 ? (
                    <div class="flex items-center">
                      <span class="text-lg font-bold text-gray-900">${(relatedProduct.price * (1 - relatedProduct.discount / 100)).toFixed(2)}</span>
                      <span class="ml-2 text-sm line-through text-gray-500">${relatedProduct.price.toFixed(2)}</span>
                    </div>
                  ) : (
                    <span class="text-lg font-bold text-gray-900">${relatedProduct.price.toFixed(2)}</span>
                  )}
                </div>
              </div>
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Lógica para la galería de imágenes
  document.addEventListener('DOMContentLoaded', () => {
    const mainImage = document.getElementById('main-image') as HTMLImageElement;
    const thumbnailButtons = document.querySelectorAll('.thumbnail-btn');
    
    thumbnailButtons.forEach(button => {
      button.addEventListener('click', () => {
        const imageUrl = (button as HTMLElement).dataset.image;
        if (mainImage && imageUrl) {
          mainImage.src = imageUrl;
        }
        
        // Actualizar estado visual de los botones
        thumbnailButtons.forEach(btn => {
          btn.classList.remove('border-amber-500');
          btn.classList.add('border-transparent');
        });
        button.classList.remove('border-transparent');
        button.classList.add('border-amber-500');
      });
    });
    
    // Lógica para la selección de color
    const colorSelectors = document.querySelectorAll('.color-selector');
    
    colorSelectors.forEach(selector => {
      selector.addEventListener('click', () => {
        colorSelectors.forEach(sel => {
          sel.classList.remove('border-amber-500');
          sel.classList.add('border-gray-300');
        });
        selector.classList.remove('border-gray-300');
        selector.classList.add('border-amber-500');
      });
    });
    
    // Lógica para la cantidad
    const quantityInput = document.getElementById('quantity') as HTMLInputElement;
    const decreaseButton = document.getElementById('decrease-quantity');
    const increaseButton = document.getElementById('increase-quantity');
    
    if (quantityInput && decreaseButton && increaseButton) {
      decreaseButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value);
        if (currentValue > 1) {
          quantityInput.value = (currentValue - 1).toString();
        }
      });
      
      increaseButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value);
        quantityInput.value = (currentValue + 1).toString();
      });
    }
    
    // Lógica para añadir al carrito
    const addToCartButton = document.getElementById('add-to-cart');
    
    if (addToCartButton) {
      addToCartButton.addEventListener('click', () => {
        const productId = (addToCartButton as HTMLElement).dataset.productId;
        const quantity = parseInt((document.getElementById('quantity') as HTMLInputElement).value);
        
        // Usar la función global definida en MainLayout
        if (window.furnitureCart) {
          window.furnitureCart.addItem(productId, quantity);
          
          // Mostrar mensaje de confirmación
          alert(`Producto añadido al carrito: ${quantity} unidad(es)`);
        }
      });
    }
  });
</script>

